// Copyright 2016 Alexey Rozhkov

#include <core/robust_algebraic_segmentation.h>
#include <iostream>

// Matlab-friendly notation for testing

/*
  img1 = [
    0.816045, 0.102159, 0.965311, 0.285946, 0.513327, 0.364852, 0.288980, 0.749286, 0.081422, 0.155492, 0.058976, 0.060022, 0.876894, 0.639486, 0.275948, 0.544876, 0.838859, 0.730281, 0.824259, 0.808983;
0.526701, 0.025570, 0.556202, 0.048673, 0.424754, 0.581813, 0.182254, 0.966267, 0.821407, 0.018588, 0.285543, 0.514578, 0.713952, 0.350223, 0.597102, 0.659934, 0.173327, 0.748276, 0.271621, 0.583222
]

  img2 = [
    0.103279, 0.491115, 0.443872, 0.361588, 0.930086, 0.266166, 0.333336, 0.655125, 0.789836, 0.116365, 0.350484, 0.726794, 0.838292, 0.049206, 0.681464, 0.758840, 0.125729, 0.318943, 0.724221, 0.055802;
0.719991, 0.377211, 0.188255, 0.329897, 0.811218, 0.572943, 0.898870, 0.756126, 0.835786, 0.067549, 0.486964, 0.092175, 0.325504, 0.269181, 0.690665, 0.568241, 0.735954, 0.187444, 0.428748, 0.798329
]
*/

int main() {
  double img1[] = {
    0.816045, 0.102159, 0.965311, 0.285946, 0.513327, 0.364852, 0.288980, 0.749286, 0.081422, 0.155492, 0.058976, 0.060022, 0.876894, 0.639486, 0.275948, 0.544876, 0.838859, 0.730281, 0.824259, 0.808983,
    0.526701, 0.025570, 0.556202, 0.048673, 0.424754, 0.581813, 0.182254, 0.966267, 0.821407, 0.018588, 0.285543, 0.514578, 0.713952, 0.350223, 0.597102, 0.659934, 0.173327, 0.748276, 0.271621, 0.583222
  };

  double img2[] = {
    0.103279, 0.491115, 0.443872, 0.361588, 0.930086, 0.266166, 0.333336, 0.655125, 0.789836, 0.116365, 0.350484, 0.726794, 0.838292, 0.049206, 0.681464, 0.758840, 0.125729, 0.318943, 0.724221, 0.055802,
    0.719991, 0.377211, 0.188255, 0.329897, 0.811218, 0.572943, 0.898870, 0.756126, 0.835786, 0.067549, 0.486964, 0.092175, 0.325504, 0.269181, 0.690665, 0.568241, 0.735954, 0.187444, 0.428748, 0.798329
  };

  auto mat1 = Mat2D(2, 20, img1);
  auto mat2 = Mat2D(2, 20, img2);

  auto p = robust_algebraic_segmentation(mat1, mat2, 2, 0.25,
                                         NotSpecified, NotSpecified,
                                         0, true, {3*CV_PI/180});

  // std::cout << p << std::endl;

  return 0;
}

